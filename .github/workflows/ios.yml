name: üçè iOS build

on:
  push:
    branches:
      - master
  release:
    types:
      - created
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  BuildIpa:

    runs-on: macOS-latest
    strategy:
      matrix:
        sdk-version: ['96']
        deployment-target: ['12.0']
        platform: ['OS64']
        qt-version: ['5.14.2']
        build-type: ['Release']
        bitcode: ['FALSE']

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: "üåç Pull Translations"
      run: |
        if [[ -z "${TX_TOKEN}" ]]; then
          echo "TX_TOKEN not set, skip tx pull"
        else
          pip install transifex-client
          ./scripts/ci/pull_translations.sh
        fi
      env:
        TX_TOKEN: ${{ secrets.TX_TOKEN }}

    - name: Download artifact
      env:
        SDK_VERSION: ${{ matrix.sdk-version }}
      run: |
        wget -O OSGeo4I-arm64.zip https://github.com/opengisch/qfield-sdk/releases/download/${SDK_VERSION}/OSGeo4I-Qt${{ matrix.qt-version }}-arm64-${{ matrix.sdk-version }}.zip
        unzip OSGeo4I-arm64.zip -d ${{ github.workspace }}

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2.1.6
      with:
        path: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.qt-version }}
        key: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}-ios

    - name: ‚¨ÜÔ∏è Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        target: ios
        dir: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.qt-version }}
        modules: 'qtcharts'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: üî• Delete Qt built-in styles (QField use Material)
      run: |
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/designer
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Fusion
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Imagine
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Universal
      shell: bash

    - uses: Apple-Actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.IOS_CERTIFICATES_FILE_BASE64 }}
        p12-password: ${{ secrets.IOS_CERTIFICATES_PASSWORD }}

    - uses: Apple-Actions/download-provisioning-profiles@v1
      with:
        bundle-id: ch.opengis.qfield
        issuer-id: ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.IOS_APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.IOS_APPSTORE_PRIVATE_KEY }}

    - name: Prepare env
      run: |
        ./scripts/ci/env_gh.sh

    - name: üîß Configure
      run: |
        source ./scripts/version_number.sh
        source ./scripts/ci/generate-version-details.sh
        mkdir -p build
        cmake \
          -G "Xcode" \
          -DAPK_VERSION_CODE=${APK_VERSION_CODE} \
          -DAPP_VERSION=${APP_VERSION} \
          -DAPP_VERSION_STR=${APP_VERSION_STR} \
          -DAPP_PACKAGE_NAME=${APP_PACKAGE_NAME} \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/OSGeo4I/arm64 \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/OSGeo4I/cmake/ios.toolchain.cmake \
          -DCMAKE_CONFIGURATION_TYPES="${{ matrix.build-type }}" \
          -DDEPLOYMENT_TARGET=${{ matrix.deployment-target }} \
          -DPLATFORM=${{ matrix.platform }} \
          -DENABLE_VISIBILITY=FALSE \
          -DENABLE_BITCODE=${{ matrix.bitcode }} \
          -DENABLE_ARC=TRUE \
          -DQT_IOS_TEAM_ID=${{ secrets.IOS_TEAM_ID }} \
          -DQT_IOS_CODE_SIGN_IDENTITY=${{ secrets.IOS_CODE_SIGN_IDENTITY }} \
          -DQT_IOS_PROVISIONING_PROFILE_SPECIFIER=${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER }} \
          -DENABLE_TESTS=OFF \
          -B ./build/ -S .

    - name: üî® Build qfield
      run: cmake --build build --target qfield --config "${{ matrix.build-type }}"

    - name: üî® Build qfield Archive
      run: cmake --build build --target qfieldArchive --config "${{ matrix.build-type }}"

    - name: üöÄ Deploy qfield Ipa
      run: |
        rm /Users/runner/work/QField/QField/build/output/bin/qfield.app
        cmake --build build --target qfieldIpa --config "${{ matrix.build-type }}"

    - name: üì¶ Upload qfield App
      uses: actions/upload-artifact@v2
      with:
        name: qfield-${{ matrix.platform }}-${{ matrix.deployment-target }}.app
        path: build/output/bin/${{ matrix.build-type }}/qfield.app

    - name: üì¶ Upload qfield Ipa
      uses: actions/upload-artifact@v2
      with:
        name: qfield-i${{ matrix.platform }}-${{ matrix.deployment-target }}.ipa
        path: build/src/app/qfieldIpa/qfield.ipa

    - uses: Apple-Actions/upload-testflight-build@v1
      if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
      name: üöÄ Release to TestFlight
      with:
        app-path: build/src/app/qfieldIpa/qfield.ipa
        issuer-id: ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.IOS_APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.IOS_APPSTORE_PRIVATE_KEY }}

    - name: üöÄ Upload Release Asset
      if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build/src/app/qfieldIpa/qfield.ipa
        asset_name: qfield-i${{ matrix.platform }}-${{ matrix.deployment-target }}.ipa
        asset_content_type: application/zip
