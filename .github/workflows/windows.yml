---
name: ü™ü Build for Windows
on:
  push:
    branches:
      - master
      - release-**
  pull_request:
  release:
    types: ['prereleased', 'released']

env:
  VCPKG_ROOT: 'C:/src'
  CMAKE_BUILD_DIR: 'C:/builddir'
  VCPKG_DEFAULT_BINARY_CACHE: 'C:/vcpkg_cache'
  TRIPLET: x64-windows

jobs:
  build-qfield:
    name: Build QField
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
#        build-type: ['Debug', 'Release']
        build-type: ['Release']
    env:
      TX_TOKEN: ${{ secrets.TX_TOKEN }}
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Bootstrap vcpkg
        run: |
          $VCPKG_SHA = Get-Content .git/modules/vcpkg/HEAD -First 1
          md "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          md "${{ env.VCPKG_ROOT }}"
          cd "${{ env.VCPKG_ROOT }}"
          git init
          git remote add origin https://github.com/opengisch/vcpkg.git
          git fetch --depth 1 origin $VCPKG_SHA
          git checkout FETCH_HEAD
          .\bootstrap-vcpkg.bat

      - name: 'Setup NuGet Credentials'
        shell: 'bash'
        run: >
          ${{ matrix.mono }} $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget | tail -n 1)
          sources add
          -source "https://nuget.pkg.github.com/opengisch/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "opengisch"
          -password "${{ secrets.GITHUB_TOKEN }}"

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies and generate project files
        run: |
          cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}" -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_OVERLAY_PORTS="${{ github.workspace }}/vcpkg_overlay" -DVCPKG_TARGET_TRIPLET="${{ matrix.triplet }}"

      - name: Upload Build Logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: build-logs
          path: C:/src/buildtrees/**/*.log

      - name: "üåç Pull Translations"
        shell: bash
        run: |
          if [[ -z "${TX_TOKEN}" ]]; then
            echo "TX_TOKEN not set, skip tx pull"
          else
            pip install transifex-client
            pushd "${{ env.VCPKG_ROOT }}"
            ./vcpkg.exe integrate install
            popd
            ./scripts/ci/pull_translations.sh
          fi
      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}"

      # - name: Test
      #  run: |
      #    cd "${{ env.CMAKE_BUILD_DIR }}"
      #    ctest -V

      - uses: actions/upload-artifact@v2
        with:
          name: "QField-dev-${{ matrix.build-type }}"
          path: "${{ env.CMAKE_BUILD_DIR }}/output"

      - name: Show space after build
        if: always()
        run: |
          Get-PSDrive
