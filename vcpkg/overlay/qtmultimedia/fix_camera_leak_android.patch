From a443ea329f681eec632c4a85b24da8546a8ec88c Mon Sep 17 00:00:00 2001
From: Bartlomiej Moskal <bartlomiej.moskal@qt.io>
Date: Tue, 25 Jul 2023 12:49:12 +0200
Subject: [PATCH] Android: Fix for memory leak in QAndroidVideoOutput

QRhi cannot be deleted while it is still used by QVideoFrame.
What is more QRhi need to be deleted from the same thread that it was
created.

Pick-to: 6.5
Fixes: QTBUG-119471
Change-Id: Id83464d248e031854d5742475c56d0c5b20773ba
Reviewed-by: Artem Dyomin <artem.dyomin@qt.io>
Reviewed-by: Assam Boudjelthia <assam.boudjelthia@qt.io>
(cherry picked from commit 7d53ccf2623dfacd4cc8f400729fb78d886924b4)
---

diff --git a/src/plugins/multimedia/android/common/qandroidvideooutput.cpp b/src/plugins/multimedia/android/common/qandroidvideooutput.cpp
index bb2a10d..5724a56 100644
--- a/src/plugins/multimedia/android/common/qandroidvideooutput.cpp
+++ b/src/plugins/multimedia/android/common/qandroidvideooutput.cpp
@@ -36,11 +36,27 @@
     std::unique_ptr<QRhiTexture> m_tex;
 };
 
-class AndroidTextureVideoBuffer : public QAbstractVideoBuffer
+// QRhiWithThreadGuard keeps QRhi and QThread (that created it) alive to allow proper cleaning
+class QRhiWithThreadGuard : public QObject {
+    Q_OBJECT
+public:
+    QRhiWithThreadGuard(std::shared_ptr<QRhi> r, std::shared_ptr<AndroidTextureThread> t)
+        : m_rhi(std::move(r)), m_thread(std::move(t)) {}
+    ~QRhiWithThreadGuard();
+private:
+    std::shared_ptr<QRhi> m_rhi;
+    std::shared_ptr<AndroidTextureThread> m_thread;
+};
+
+
+class AndroidTextureVideoBuffer : public QRhiWithThreadGuard, public QAbstractVideoBuffer
 {
 public:
-    AndroidTextureVideoBuffer(QRhi *rhi, std::unique_ptr<QRhiTexture> tex, const QSize &size)
-        : QAbstractVideoBuffer(QVideoFrame::RhiTextureHandle, rhi)
+    AndroidTextureVideoBuffer(
+            std::shared_ptr<QRhi> rhi, std::shared_ptr<AndroidTextureThread> thread,
+            std::unique_ptr<QRhiTexture> tex, const QSize &size)
+        : QRhiWithThreadGuard(std::move(rhi), std::move(thread))
+          , QAbstractVideoBuffer(QVideoFrame::RhiTextureHandle, rhi.get())
           , m_size(size)
           , m_tex(std::move(tex))
     {}
@@ -254,7 +270,10 @@
 {
     Q_OBJECT
 public:
-    AndroidTextureThread() : QThread() {
+    AndroidTextureThread(QAndroidTextureVideoOutput * vo)
+        : QThread()
+        , m_videoOutput(vo)
+    {
     }
 
     ~AndroidTextureThread() {
@@ -286,7 +305,7 @@
             m_surfaceTexture->updateTexImage();
             auto matrix = extTransformMatrix(m_surfaceTexture.get());
             auto tex = m_textureCopy->copyExternalTexture(m_size, matrix);
-            auto *buffer = new AndroidTextureVideoBuffer(m_rhi.get(), std::move(tex), m_size);
+            auto *buffer = new AndroidTextureVideoBuffer(m_rhi, m_videoOutput->getSurfaceThread(), std::move(tex), m_size);
             QVideoFrame frame(buffer, QVideoFrameFormat(m_size, QVideoFrameFormat::Format_RGBA8888));
             emit newFrame(frame);
         }
@@ -335,13 +354,20 @@
     void newFrame(const QVideoFrame &);
 
 private:
-    std::unique_ptr<QRhi> m_rhi;
+    QAndroidTextureVideoOutput * m_videoOutput;
+    std::shared_ptr<QRhi> m_rhi;
     std::unique_ptr<AndroidSurfaceTexture> m_surfaceTexture;
     std::unique_ptr<QRhiTexture> m_texture;
     std::unique_ptr<TextureCopy> m_textureCopy;
     QSize m_size;
 };
 
+QRhiWithThreadGuard::~QRhiWithThreadGuard() {
+    // It may happen that reseting m_rhi shared_ptr will delete it (if it is the last reference)
+    // QRHI need to be deleted from the thread that created it.
+    QMetaObject::invokeMethod(m_thread.get(), [&]() {m_rhi.reset();}, Qt::BlockingQueuedConnection);
+}
+
 QAndroidTextureVideoOutput::QAndroidTextureVideoOutput(QVideoSink *sink, QObject *parent)
     : QAndroidVideoOutput(parent)
     , m_sink(sink)
@@ -352,7 +378,12 @@
         return;
     }
 
-    m_surfaceThread = std::make_unique<AndroidTextureThread>();
+    startNewSurfaceThread();
+}
+
+void QAndroidTextureVideoOutput::startNewSurfaceThread()
+{
+    m_surfaceThread = std::make_shared<AndroidTextureThread>(this);
     connect(m_surfaceThread.get(), &AndroidTextureThread::newFrame,
             this, &QAndroidTextureVideoOutput::newFrame);
     m_surfaceThread->start();
@@ -360,6 +391,9 @@
 
 QAndroidTextureVideoOutput::~QAndroidTextureVideoOutput()
 {
+    // Make sure that no more VideFrames will be created by surfaceThread
+    QMetaObject::invokeMethod(m_surfaceThread.get(),
+        &AndroidTextureThread::clearSurfaceTexture, Qt::BlockingQueuedConnection);
 }
 
 void QAndroidTextureVideoOutput::setSubtitle(const QString &subtitle)
@@ -419,6 +453,11 @@
     if (m_sink)
         m_sink->platformVideoSink()->setVideoFrame({});
     QMetaObject::invokeMethod(m_surfaceThread.get(), &AndroidTextureThread::clearSurfaceTexture);
+    // We are not allowed to work on the same thread after the reset
+    // as there may be pending frames and should not be handled.
+    startNewSurfaceThread();
+    QMetaObject::invokeMethod(m_surfaceThread.get(),
+        [&](){ m_surfaceThread->setFrameSize(m_nativeSize); }, Qt::BlockingQueuedConnection);
 }
 
 void QAndroidTextureVideoOutput::newFrame(const QVideoFrame &frame)
diff --git a/src/plugins/multimedia/android/common/qandroidvideooutput_p.h b/src/plugins/multimedia/android/common/qandroidvideooutput_p.h
index bf17ee6..c59a1b7 100644
--- a/src/plugins/multimedia/android/common/qandroidvideooutput_p.h
+++ b/src/plugins/multimedia/android/common/qandroidvideooutput_p.h
@@ -53,6 +53,7 @@
     QAndroidVideoOutput(QObject *parent) : QObject(parent) { }
 };
 
+class AndroidTextureThread;
 class QAndroidTextureVideoOutput : public QAndroidVideoOutput
 {
     Q_OBJECT
@@ -71,15 +72,17 @@
     QSize getVideoSize() const override { return m_nativeSize; }
 
     void setSubtitle(const QString &subtitle);
+    std::shared_ptr<AndroidTextureThread> getSurfaceThread() { return m_surfaceThread; }
 private Q_SLOTS:
     void newFrame(const QVideoFrame &);
 
 private:
+    void startNewSurfaceThread();
     QVideoSink *m_sink = nullptr;
     QSize m_nativeSize;
     bool m_surfaceCreatedWithoutRhi = false;
 
-    std::unique_ptr<class AndroidTextureThread> m_surfaceThread;
+    std::shared_ptr<AndroidTextureThread> m_surfaceThread;
 };
 
 QT_END_NAMESPACE
